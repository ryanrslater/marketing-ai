// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TierTypes {
  FREE
  BASIC
  PREMIUM
  PRO
  ENTERPRISE
}

enum SEOPageType {
  HOME
  ABOUT
  CONTACT
  BLOG
  BLOG_POST
  PRODUCT
}

enum BusinessType {
  ECOMMERCE
  SERVICE
  BLOG
  SAAS
}

enum BusinessSuccessOutcomes {
  CLICKS
  LEADS
  SALES
  SUBSCRIPTIONS
  DONATIONS
  OTHER
}

model Users {
  id        String     @id @default(uuid())
  name      String
  email     String
  accounts  Accounts[]
  tier      Tier       @relation(fields: [tierId], references: [id])
  stripe    Stripe?
  tierId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Accounts {
  id              String                  @id @default(uuid())
  name            String
  url             String
  users           Users[]
  profile         String
  banner          String
  owner           String
  primaryColor    String
  secondaryColor  String
  businessTypes   BusinessTypes[]
  successOutcomes SuccessOutcomes[]
  successOutcome  BusinessSuccessOutcomes
  seo             SEO?                    @relation(fields: [seoId], references: [id])
  seoId           String                  @unique
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

model BusinessTypes {
  id          String       @id @default(uuid())
  account     Accounts[]
  name        BusinessType @unique
  display     String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SuccessOutcomes {
  id          String                  @id @default(uuid())
  account     Accounts[]
  name        BusinessSuccessOutcomes @unique
  display     String
  description String
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model Tier {
  id        String    @id @default(uuid())
  name      String
  price     Int
  type      TierTypes
  user      Users[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Stripe {
  id                                   String   @id @default(uuid())
  user                                 Users    @relation(fields: [userId], references: [id])
  userId                               String   @unique
  stripeId                             String
  stripeSubscriptionId                 String
  stripeCustomerId                     String
  stripeSubscriptionStatus             String
  stripeSubscriptionCancelAtPeriodEnd  Boolean
  stripeSubscriptionCurrentPeriodEnd   DateTime
  stripeSubscriptionCurrentPeriodStart DateTime
  stripeSubscriptionEndedAt            DateTime
}

model StripeWebhook {
  id        String   @id @default(uuid())
  stripeId  String
  type      String
  data      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SEO {
  id          String       @id @default(uuid())
  account     Accounts?
  title       String
  description String
  image       String
  seoReport   SEOReport[]
  seoKeywords SEOKeyword[]
  seoPages    SEOPage[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SEOKeyword {
  id        String   @id @default(uuid())
  seo       SEO      @relation(fields: [seoId], references: [id])
  seoId     String
  keyword   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SEOReport {
  id        String   @id @default(uuid())
  seo       SEO      @relation(fields: [seoId], references: [id])
  seoId     String
  score     Int?
  report    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SEOPage {
  id        String      @id @default(uuid())
  seo       SEO         @relation(fields: [seoId], references: [id])
  seoId     String
  type      SEOPageTypes[]
  keywords  SEOPageKeywords[]
  title     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model SEOPageTypes {
  id        String      @id @default(uuid())
  seoPages  SEOPage[]
  type      SEOPageType @unique
  display   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model SEOPageKeywords {
  id        String   @id @default(uuid())
  seoPage   SEOPage  @relation(fields: [seoPageId], references: [id])
  seoPageId String
  keyword   String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}